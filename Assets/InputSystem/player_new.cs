//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/InputSystem/player_new.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Player_new: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Player_new()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""player_new"",
    ""maps"": [
        {
            ""name"": ""player"",
            ""id"": ""2f1b9a30-4ca7-46eb-ab44-3ee3ce79d1ae"",
            ""actions"": [
                {
                    ""name"": ""player_mouse_x"",
                    ""type"": ""Value"",
                    ""id"": ""96d327d4-eef4-4aea-9a5a-9c2522905dc4"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""player_mouse_y"",
                    ""type"": ""Value"",
                    ""id"": ""6dbffc2d-31a5-4b3c-a465-e0f2f655e7d8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""fire"",
                    ""type"": ""Button"",
                    ""id"": ""db5f1bd3-bfa1-4a6a-8f3e-eb540a0e519a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""mouse_x"",
                    ""id"": ""9beea1bf-7ef7-416b-a83d-331e83f2a344"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""player_mouse_x"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""1f5a8ed1-053a-4935-8804-2e952f476519"",
                    ""path"": ""<Mouse>/delta/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""player_mouse_x"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""f4e0198e-1f50-4990-b3fd-810f38ad05aa"",
                    ""path"": ""<Mouse>/delta/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""player_mouse_x"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""mouse_y"",
                    ""id"": ""9c20ed74-b5d2-41ff-bf41-56f6ed371319"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""player_mouse_y"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""5a2acdea-1ab8-45a8-a797-0bf632164d6c"",
                    ""path"": ""<Mouse>/delta/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""player_mouse_y"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""4c78595c-1e5f-4fe0-ac23-8eb8c1f3b16d"",
                    ""path"": ""<Mouse>/delta/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""player_mouse_y"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""9ff42fbf-a148-470d-bcfe-dfdf028c3052"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""mouse"",
            ""bindingGroup"": ""mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<VirtualMouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // player
        m_player = asset.FindActionMap("player", throwIfNotFound: true);
        m_player_player_mouse_x = m_player.FindAction("player_mouse_x", throwIfNotFound: true);
        m_player_player_mouse_y = m_player.FindAction("player_mouse_y", throwIfNotFound: true);
        m_player_fire = m_player.FindAction("fire", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // player
    private readonly InputActionMap m_player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_player_player_mouse_x;
    private readonly InputAction m_player_player_mouse_y;
    private readonly InputAction m_player_fire;
    public struct PlayerActions
    {
        private @Player_new m_Wrapper;
        public PlayerActions(@Player_new wrapper) { m_Wrapper = wrapper; }
        public InputAction @player_mouse_x => m_Wrapper.m_player_player_mouse_x;
        public InputAction @player_mouse_y => m_Wrapper.m_player_player_mouse_y;
        public InputAction @fire => m_Wrapper.m_player_fire;
        public InputActionMap Get() { return m_Wrapper.m_player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @player_mouse_x.started += instance.OnPlayer_mouse_x;
            @player_mouse_x.performed += instance.OnPlayer_mouse_x;
            @player_mouse_x.canceled += instance.OnPlayer_mouse_x;
            @player_mouse_y.started += instance.OnPlayer_mouse_y;
            @player_mouse_y.performed += instance.OnPlayer_mouse_y;
            @player_mouse_y.canceled += instance.OnPlayer_mouse_y;
            @fire.started += instance.OnFire;
            @fire.performed += instance.OnFire;
            @fire.canceled += instance.OnFire;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @player_mouse_x.started -= instance.OnPlayer_mouse_x;
            @player_mouse_x.performed -= instance.OnPlayer_mouse_x;
            @player_mouse_x.canceled -= instance.OnPlayer_mouse_x;
            @player_mouse_y.started -= instance.OnPlayer_mouse_y;
            @player_mouse_y.performed -= instance.OnPlayer_mouse_y;
            @player_mouse_y.canceled -= instance.OnPlayer_mouse_y;
            @fire.started -= instance.OnFire;
            @fire.performed -= instance.OnFire;
            @fire.canceled -= instance.OnFire;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @player => new PlayerActions(this);
    private int m_mouseSchemeIndex = -1;
    public InputControlScheme mouseScheme
    {
        get
        {
            if (m_mouseSchemeIndex == -1) m_mouseSchemeIndex = asset.FindControlSchemeIndex("mouse");
            return asset.controlSchemes[m_mouseSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnPlayer_mouse_x(InputAction.CallbackContext context);
        void OnPlayer_mouse_y(InputAction.CallbackContext context);
        void OnFire(InputAction.CallbackContext context);
    }
}
